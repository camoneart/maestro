name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm run lint --max-warnings 0


      - name: Run Prettier check
        run: pnpm run prettier:check

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        run: pnpm run typecheck

  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: ['20', '22']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for skipped tests
        run: |
          if grep -r '\.skip(' src/__tests__ e2e --include='*.test.ts' --include='*.test.tsx' 2>/dev/null; then
            echo "Error: Found .skip() in test files. All tests must be enabled."
            exit 1
          fi
          echo "No skipped tests found ✓"

      - name: Run unit tests
        run: pnpm run test

      - name: Run tests with coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        run: pnpm run test:coverage

      - name: Build
        run: pnpm run build

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Skip coverage upload (no token)
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20' && secrets.CODECOV_TOKEN == ''
        run: |
          echo "⚠️  Codecov token not available - skipping coverage upload"
          echo "To enable coverage reporting, add CODECOV_TOKEN to repository secrets"
          echo "Visit: https://app.codecov.io/github/hashiramaendure/shadow-clone-jutsu"

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20' && secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: shadow-clone-jutsu
          fail_ci_if_error: false

      - name: Check coverage thresholds
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        run: |
          # Check if coverage meets minimum threshold (80%)
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Current coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below minimum threshold of 80%"
            exit 1
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Check build output
        run: |
          if [ ! -f "dist/cli.js" ]; then
            echo "Build failed: dist/cli.js not found"
            exit 1
          fi
          echo "Build successful"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run pnpm audit
        run: pnpm audit --prod
        continue-on-error: true

  release-check:
    name: Release Check
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check version bump
        run: |
          # メインブランチのpackage.jsonのバージョンを取得
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:package.json | jq -r .version)
          
          # 現在のブランチのpackage.jsonのバージョンを取得
          CURRENT_VERSION=$(jq -r .version package.json)
          
          echo "Main branch version: $MAIN_VERSION"
          echo "Current branch version: $CURRENT_VERSION"
          
          # バージョンが同じ場合は警告
          if [ "$MAIN_VERSION" = "$CURRENT_VERSION" ]; then
            echo "::warning::Version has not been bumped. Consider updating the version in package.json"
          fi